// Effect Syntax Guide: https://github.com/cocos-creator/docs-3d/blob/master/zh/material-system/effect-syntax.md

CCEffect %{
  techniques:
  - passes:
    - vert: vs:vert
      frag: fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: one
          blendDst: one_minus_src_alpha
          blendSrcAlpha: one
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthTest: false
        depthWrite: false
      properties:
        lightPos: { value: [1., -1.] }
        lineWidth: { value: 40. }
}%

CCProgram vs %{
  precision highp float;

  #include <builtin/uniforms/cc-global>
  #include <builtin/uniforms/cc-local>

  in vec3 a_position;

  in vec4 a_color;
  
  in float a_dist;
  out float v_dist;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * cc_matWorld * pos;

    v_dist = a_dist;

    return pos;
  }
}%

CCProgram fs %{
  #extension GL_OES_standard_derivatives : enable
  

  precision highp float;
  #include <builtin/uniforms/cc-global>

  in float v_dist;

  uniform Constants {
    vec2 lightPos;
    float lineWidth;
  };


  vec4 frag () {

    float maxDist = lineWidth / 4.;
    float D = abs(v_dist) * 2.0 - 1.0;
    D *= -maxDist;

    float aastep = fwidth(D);

    // 在边缘处做aa
    float aaMask = smoothstep(-aastep, aastep, abs(D) - 1.0);

    // do a simple color mix, note the AA is not accurate
    vec2 delta = vec2(dFdx(D), dFdy(D));
    float brightNess = dot(normalize(delta), normalize(-lightPos));

    // neither too bright nor too dark
    brightNess = clamp(brightNess, 0.15, 0.85);

    // edge width/2, in pixel
    float w = maxDist / 2.;

    // edge range, [-2w, 0]
    float edgeMask = smoothstep(aastep, -aastep, abs(D + w) - w);

    // inside range, (0, +)
    float insideMask = smoothstep(-aastep, aastep, D);

    // mix color
    vec3 color = vec3(brightNess * edgeMask) + vec3(1.0) * insideMask;

    // be golden
    color *= vec3(1., 213./255., 0.);

    float finalMask = (edgeMask + insideMask);

    return vec4(color * finalMask, finalMask);
  }
}%
