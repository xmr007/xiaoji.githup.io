// Effect Syntax Guide: https://github.com/cocos-creator/docs-3d/blob/master/zh/material-system/effect-syntax.md

CCEffect %{
  techniques:
  - passes:
    - vert: vs:vert
      frag: fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: one
          blendDst: one_minus_src_alpha
          blendSrcAlpha: one
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthTest: false
        depthWrite: false
}%

CCProgram vs %{
  precision highp float;

  #include <builtin/uniforms/cc-global>
  #include <builtin/uniforms/cc-local>

  in vec3 a_position;

  in vec4 a_color;
  out vec4 v_color;

  in float a_dist;
  out float v_dist;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * cc_matWorld * pos;

    v_color = a_color;
    v_dist = a_dist;

    return pos;
  }
}%

CCProgram fs %{

  precision highp float;
  #include <builtin/uniforms/cc-global>

  in vec4 v_color;
  in float v_dist;
  float Remap01(float a, float b, float t) {
    return (t-a) / (b-a);
  }

  float Remap(float a, float b, float c, float d, float t) {
    return Remap01(a, b, t) * (d-c) + c;
  }

  // 脉冲函数
  // X,Y区间都是[0,1]，X=0.5位置Y=1
  float Pulse(float x) {
    x *= 0.4;
    x = x + 0.5;
    
    float k = 16.;
    return pow(4.0 * x * (1.0 - x), k);
  }

  vec4 frag () {
    float alpha = abs(v_dist);

    // 轮廓宽度(0.0, 1.0), 对应alpha区域
    float outlineWidth = 1.0;
    // 选择一个alpha值做为轮廓的中线
    float centerAlpha = 0.;

    float alphaDist = abs(alpha - centerAlpha);
    float mask = smoothstep(outlineWidth, 0., alphaDist);
    vec4 col = vec4(vec3(1.,0.,1.), mask);
    
    // 底色基础上叠加一个亮度，叠加后中心位置变白
    // 对亮度做一个动画
    float brightness = Remap(0., 1., 0.6, 1.0, abs(sin(cc_time.x * 2.5)));
    // col.rgb = vec3(0.);
    col.rgb += Pulse(alphaDist) * brightness;

    col.rgb *= col.a;

    return col;
  }
}%
